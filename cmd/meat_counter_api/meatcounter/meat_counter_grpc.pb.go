// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cmd/meat_counter_api/proto/meat_counter.proto

package meatcounter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeatCounterClient is the client API for MeatCounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeatCounterClient interface {
	GetMeats(ctx context.Context, in *GetMeatsRequest, opts ...grpc.CallOption) (*GetMeatsResponse, error)
}

type meatCounterClient struct {
	cc grpc.ClientConnInterface
}

func NewMeatCounterClient(cc grpc.ClientConnInterface) MeatCounterClient {
	return &meatCounterClient{cc}
}

func (c *meatCounterClient) GetMeats(ctx context.Context, in *GetMeatsRequest, opts ...grpc.CallOption) (*GetMeatsResponse, error) {
	out := new(GetMeatsResponse)
	err := c.cc.Invoke(ctx, "/meatcounter.MeatCounter/GetMeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeatCounterServer is the server API for MeatCounter service.
// All implementations must embed UnimplementedMeatCounterServer
// for forward compatibility
type MeatCounterServer interface {
	GetMeats(context.Context, *GetMeatsRequest) (*GetMeatsResponse, error)
	mustEmbedUnimplementedMeatCounterServer()
}

// UnimplementedMeatCounterServer must be embedded to have forward compatible implementations.
type UnimplementedMeatCounterServer struct {
}

func (UnimplementedMeatCounterServer) GetMeats(context.Context, *GetMeatsRequest) (*GetMeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeats not implemented")
}
func (UnimplementedMeatCounterServer) mustEmbedUnimplementedMeatCounterServer() {}

// UnsafeMeatCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeatCounterServer will
// result in compilation errors.
type UnsafeMeatCounterServer interface {
	mustEmbedUnimplementedMeatCounterServer()
}

func RegisterMeatCounterServer(s grpc.ServiceRegistrar, srv MeatCounterServer) {
	s.RegisterService(&MeatCounter_ServiceDesc, srv)
}

func _MeatCounter_GetMeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatCounterServer).GetMeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meatcounter.MeatCounter/GetMeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatCounterServer).GetMeats(ctx, req.(*GetMeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeatCounter_ServiceDesc is the grpc.ServiceDesc for MeatCounter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeatCounter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meatcounter.MeatCounter",
	HandlerType: (*MeatCounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeats",
			Handler:    _MeatCounter_GetMeats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/meat_counter_api/proto/meat_counter.proto",
}
